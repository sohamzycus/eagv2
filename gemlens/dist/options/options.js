var n=Object.defineProperty;var o=(i,e,t)=>e in i?n(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var s=(i,e,t)=>o(i,typeof e!="symbol"?e+"":e,t);class l{constructor(){s(this,"apiKeyInput");s(this,"toggleBtn");s(this,"saveBtn");s(this,"testBtn");s(this,"clearBtn");s(this,"statusMessage");s(this,"autoSummarizeCheckbox");s(this,"summaryLengthSelect");s(this,"languageSelect");s(this,"isApiKeyVisible",!1);this.apiKeyInput=document.getElementById("apiKey"),this.toggleBtn=document.getElementById("toggleApiKey"),this.saveBtn=document.getElementById("saveBtn"),this.testBtn=document.getElementById("testBtn"),this.clearBtn=document.getElementById("clearBtn"),this.statusMessage=document.getElementById("statusMessage"),this.autoSummarizeCheckbox=document.getElementById("autoSummarize"),this.summaryLengthSelect=document.getElementById("summaryLength"),this.languageSelect=document.getElementById("language"),this.init()}async init(){await this.loadSettings(),await this.loadStats(),this.setupEventListeners()}async loadSettings(){try{(await chrome.storage.local.get(["GEMINI_API_KEY"])).GEMINI_API_KEY&&(this.apiKeyInput.value="••••••••••••••••",this.apiKeyInput.dataset.hasKey="true",this.showStatus("API key is configured","success"));const t=await chrome.storage.local.get(["userPreferences"]);if(t.userPreferences){const a=t.userPreferences;this.autoSummarizeCheckbox.checked=a.autoSummarize||!1,this.summaryLengthSelect.value=a.summaryLength||"medium",this.languageSelect.value=a.language||"en"}}catch(e){console.error("Failed to load settings:",e)}}async loadStats(){try{const t=(await chrome.storage.local.get(["usageStats"])).usageStats||{totalSummaries:0,totalChats:0,timesSaved:0};document.getElementById("totalSummaries").textContent=t.totalSummaries.toString(),document.getElementById("totalChats").textContent=t.totalChats.toString(),document.getElementById("timesSaved").textContent=`${Math.round(t.timesSaved/60)}h`}catch(e){console.error("Failed to load stats:",e)}}setupEventListeners(){var e,t,a;this.toggleBtn.addEventListener("click",()=>this.toggleApiKeyVisibility()),this.saveBtn.addEventListener("click",()=>this.saveApiKey()),this.testBtn.addEventListener("click",()=>this.testApiKey()),this.clearBtn.addEventListener("click",()=>this.clearApiKey()),this.autoSummarizeCheckbox.addEventListener("change",()=>this.savePreferences()),this.summaryLengthSelect.addEventListener("change",()=>this.savePreferences()),this.languageSelect.addEventListener("change",()=>this.savePreferences()),(e=document.getElementById("resetStatsBtn"))==null||e.addEventListener("click",()=>this.resetStats()),(t=document.getElementById("reportIssue"))==null||t.addEventListener("click",()=>this.reportIssue()),(a=document.getElementById("showVersion"))==null||a.addEventListener("click",()=>this.showVersionInfo()),this.apiKeyInput.addEventListener("keydown",r=>{r.key==="Enter"&&this.saveApiKey()}),this.apiKeyInput.addEventListener("focus",()=>{this.apiKeyInput.dataset.hasKey==="true"&&!this.isApiKeyVisible&&(this.apiKeyInput.value="",this.apiKeyInput.placeholder="Enter new API key or leave blank to keep current")})}toggleApiKeyVisibility(){this.isApiKeyVisible=!this.isApiKeyVisible,this.isApiKeyVisible?(this.apiKeyInput.type="text",this.toggleBtn.innerHTML=`
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
          <line x1="1" y1="1" x2="23" y2="23"></line>
        </svg>
      `):(this.apiKeyInput.type="password",this.toggleBtn.innerHTML=`
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
          <circle cx="12" cy="12" r="3"></circle>
        </svg>
      `)}async saveApiKey(){const e=this.apiKeyInput.value.trim();if(!e||e==="••••••••••••••••"){this.showStatus("Please enter a valid API key","error");return}if(!e.startsWith("AIza")){this.showStatus('Invalid API key format. Google API keys start with "AIza"',"error");return}try{this.setButtonLoading(this.saveBtn,!0),await chrome.storage.local.set({GEMINI_API_KEY:e}),await chrome.runtime.sendMessage({action:"refreshApiKey"}),this.apiKeyInput.value="••••••••••••••••",this.apiKeyInput.dataset.hasKey="true",this.showStatus("API key saved successfully!","success")}catch(t){this.showStatus("Failed to save API key: "+t.message,"error")}finally{this.setButtonLoading(this.saveBtn,!1)}}async testApiKey(){try{if(this.setButtonLoading(this.testBtn,!0),!(await chrome.storage.local.get(["GEMINI_API_KEY"])).GEMINI_API_KEY){this.showStatus("No API key found. Please save an API key first.","error");return}const t=await chrome.runtime.sendMessage({action:"summarizePage",text:"This is a test message to verify the API key is working correctly.",url:"test"});t!=null&&t.error?this.showStatus("API key test failed: "+t.error,"error"):t!=null&&t.summary?this.showStatus("API key is working correctly! ✅","success"):this.showStatus("Unexpected response from API","error")}catch(e){this.showStatus("Failed to test API key: "+e.message,"error")}finally{this.setButtonLoading(this.testBtn,!1)}}async clearApiKey(){if(confirm("Are you sure you want to clear your API key? You will need to enter it again to use GemLens."))try{await chrome.storage.local.remove(["GEMINI_API_KEY"]),await chrome.runtime.sendMessage({action:"refreshApiKey"}),this.apiKeyInput.value="",this.apiKeyInput.placeholder="Enter your Gemini API key...",delete this.apiKeyInput.dataset.hasKey,this.showStatus("API key cleared","info")}catch(e){this.showStatus("Failed to clear API key: "+e.message,"error")}}async savePreferences(){const e={autoSummarize:this.autoSummarizeCheckbox.checked,summaryLength:this.summaryLengthSelect.value,language:this.languageSelect.value};try{await chrome.storage.local.set({userPreferences:e}),this.showStatus("Preferences saved","success",2e3)}catch(t){this.showStatus("Failed to save preferences: "+t.message,"error")}}async resetStats(){if(confirm("Are you sure you want to reset all usage statistics?"))try{const e={totalSummaries:0,totalChats:0,timesSaved:0};await chrome.storage.local.set({usageStats:e}),await this.loadStats(),this.showStatus("Statistics reset successfully","success")}catch(e){this.showStatus("Failed to reset statistics: "+e.message,"error")}}reportIssue(){window.open("https://github.com/your-username/gemlens/issues/new","_blank")}showVersionInfo(){const e=chrome.runtime.getManifest();alert(`GemLens v${e.version}

A Chrome extension for AI-powered webpage and video summarization using Google Gemini.`)}showStatus(e,t,a=5e3){this.statusMessage.textContent=e,this.statusMessage.className=`status-message ${t}`,this.statusMessage.style.display="block",setTimeout(()=>{this.statusMessage.style.display="none"},a)}setButtonLoading(e,t){t?(e.disabled=!0,e.style.opacity="0.7",e.textContent="Loading..."):(e.disabled=!1,e.style.opacity="1",e===this.saveBtn?e.textContent="Save API Key":e===this.testBtn&&(e.textContent="Test Connection"))}}document.addEventListener("DOMContentLoaded",()=>{new l});
