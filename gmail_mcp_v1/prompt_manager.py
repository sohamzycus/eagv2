# prompt_manager.py - system prompt and deterministic planner for Gmail operations
from utils import log_and_time

def system_prompt_text():
    return '''You are an AI agent that controls Gmail through tool calls. You MUST use these tools to complete email tasks:

AVAILABLE TOOLS:
- get_gmail_info() - Get Gmail account information and authentication status
- send_email({"to": "email@example.com", "subject": "Subject", "body": "Message body", "cc": "optional", "bcc": "optional"}) - Send an email
- compose_email({"to": "email@example.com", "subject": "Subject", "body": "Message body"}) - Create an email draft
- list_recent_emails({"max_results": 10}) - List recent emails (max 50)

CRITICAL RULES:
1) You MUST respond ONLY with tool calls in this format: TOOL_CALL: tool_name {"param": value}
2) NEVER provide text explanations or instructions - only tool calls
3) Always start with: TOOL_CALL: get_gmail_info {}
4) For sending emails, always use: TOOL_CALL: send_email {"to": "recipient@email.com", "subject": "Your Subject", "body": "Your message content"}
5) For drafts, use: TOOL_CALL: compose_email {"to": "recipient@email.com", "subject": "Your Subject", "body": "Your message content"}
6) For checking emails, use: TOOL_CALL: list_recent_emails {"max_results": 5}

EMAIL FORMATTING GUIDELINES:
- Subject lines should be clear and descriptive
- Email body should be professional and well-formatted
- Include appropriate greetings and closings
- Use proper grammar and punctuation

EXAMPLE OUTPUT:
TOOL_CALL: get_gmail_info {}
TOOL_CALL: send_email {"to": "user@example.com", "subject": "Hello from AI Assistant", "body": "Dear User,\\n\\nThis is a test email sent by an AI assistant using Gmail API.\\n\\nBest regards,\\nAI Assistant"}

EXAMPLE FOR DRAFT:
TOOL_CALL: get_gmail_info {}
TOOL_CALL: compose_email {"to": "colleague@company.com", "subject": "Meeting Follow-up", "body": "Hi,\\n\\nFollowing up on our meeting today. Here are the action items we discussed:\\n\\n1. Review the proposal\\n2. Schedule next meeting\\n3. Send updated timeline\\n\\nLet me know if you have any questions.\\n\\nBest,\\nYour Name"}
'''

@log_and_time
def plan_calls(question_text: str, gmail_info: dict = None):
    """Generate deterministic email tool calls based on the question"""
    if gmail_info is None:
        gmail_info = {'user_email': 'user@example.com', 'authenticated': True}
    
    # Analyze the question to determine intent
    question_lower = question_text.lower()
    
    calls = [('get_gmail_info', {})]
    
    # Determine the primary action based on keywords
    if any(word in question_lower for word in ['send', 'email', 'mail', 'message']):
        # Extract recipient if mentioned
        if 'to ' in question_lower or '@' in question_text:
            # Try to extract email from question
            words = question_text.split()
            recipient = None
            for word in words:
                if '@' in word and '.' in word:
                    recipient = word.strip('.,!?();')
                    break
            
            if not recipient:
                recipient = 'example@email.com'
            
            # Generate subject and body based on question
            if 'subject' in question_lower:
                subject_parts = question_text.split('subject')
                if len(subject_parts) > 1:
                    subject = subject_parts[1].split('and')[0].strip(' "\'')[:50]
                else:
                    subject = "Message from AI Assistant"
            else:
                subject = "Message from AI Assistant"
            
            # Generate body content
            if any(word in question_lower for word in ['test', 'hello', 'hi']):
                body = f"Hello,\\n\\nThis is a test email generated by an AI assistant in response to: '{question_text}'\\n\\nBest regards,\\nAI Assistant"
            else:
                body = f"Hello,\\n\\nI'm writing in response to your request: '{question_text}'\\n\\nPlease let me know if you need any additional information.\\n\\nBest regards,\\nAI Assistant"
            
            # Decide between send or compose based on keywords
            if any(word in question_lower for word in ['draft', 'compose', 'prepare']):
                calls.append(('compose_email', {
                    'to': recipient,
                    'subject': subject,
                    'body': body
                }))
            else:
                calls.append(('send_email', {
                    'to': recipient,
                    'subject': subject,
                    'body': body
                }))
    
    elif any(word in question_lower for word in ['list', 'check', 'show', 'recent', 'inbox']):
        # List recent emails
        max_results = 5
        if 'all' in question_lower:
            max_results = 20
        elif any(str(i) in question_text for i in range(1, 51)):
            # Extract number from question
            import re
            numbers = re.findall(r'\d+', question_text)
            if numbers:
                max_results = min(int(numbers[0]), 50)
        
        calls.append(('list_recent_emails', {'max_results': max_results}))
    
    else:
        # Default: send a general response email
        calls.append(('send_email', {
            'to': 'example@email.com',
            'subject': 'Response from AI Assistant',
            'body': f"Hello,\\n\\nI received your message: '{question_text}'\\n\\nI'm an AI assistant that can help with email operations through Gmail API.\\n\\nBest regards,\\nAI Assistant"
        }))
    
    log_line = f'LOG: Planned {len(calls)} email operations for: "{question_text}"'
    return calls, log_line
